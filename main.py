import nest_asyncio
nest_asyncio.apply()

import logging
import os
import requests
import random
import feedparser
import string
import asyncio
from datetime import time

from dotenv import load_dotenv
load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

# ------------------ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# ------------------ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
BASE_CURRENCY = "RUB"  # –¥–ª—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç

# ------------------ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ ------------------
todo_tasks = {}           # {chat_id: [task, ...]}
user_settings = {}        # {chat_id: {"city": "..." }}
subscriptions = {}        # {(chat_id, subscription_type): job}
quiz_questions = [
    {"question": "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?", "options": ["3", "4", "5"], "answer": "4"},
    {"question": "–°—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?", "options": ["–ë–µ—Ä–ª–∏–Ω", "–ü–∞—Ä–∏–∂", "–†–∏–º"], "answer": "–ü–∞—Ä–∏–∂"},
    {"question": "–ö–∞–∫–æ–π —Ñ—Ä—É–∫—Ç –±—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–Ω—ã–º, –∑–µ–ª—ë–Ω—ã–º –∏ –∂—ë–ª—Ç—ã–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ?", "options": ["–Ø–±–ª–æ–∫–æ", "–ë–∞–Ω–∞–Ω", "–ê–ø–µ–ª—å—Å–∏–Ω"], "answer": "–Ø–±–ª–æ–∫–æ"},
    {"question": "–ß—Ç–æ –≤—Å–µ–≥–¥–∞ –∏–¥—ë—Ç, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç?", "options": ["–ö—Ä—É–≥", "–í—Ä–µ–º—è", "–†–µ–∫–∞"], "answer": "–í—Ä–µ–º—è"},
    {"question": "–ö–∞–∫–∞—è —Ä–µ–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–∞–º–æ–π –¥–ª–∏–Ω–Ω–æ–π –≤ –º–∏—Ä–µ?", "options": ["–ê–º–∞–∑–æ–Ω–∫–∞", "–ù–∏–ª", "–ú–∏—Å—Å–∏—Å–∏–ø–∏"], "answer": "–ù–∏–ª"},
    {"question": "–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤ –≤–∏—Å–æ–∫–æ—Å–Ω–æ–º –≥–æ–¥—É?", "options": ["365", "366", "367"], "answer": "366"},
    {"question": "–ö–∞–∫–æ–π —Ü–≤–µ—Ç –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–º–µ—à–∏–≤–∞–Ω–∏–∏ —Å–∏–Ω–µ–≥–æ –∏ –∂—ë–ª—Ç–æ–≥–æ?", "options": ["–ó–µ–ª—ë–Ω—ã–π", "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "–û—Ä–∞–Ω–∂–µ–≤—ã–π"], "answer": "–ó–µ–ª—ë–Ω—ã–π"},
    {"question": "–ß—Ç–æ –≤—Å–µ–≥–¥–∞ —Ä–∞—Å—Ç—ë—Ç, –Ω–æ –Ω–µ —Å—Ç–∞—Ä–µ–µ—Ç?", "options": ["–î–µ—Ä–µ–≤–æ", "–†–∞—Å—Ç–µ–Ω–∏–µ", "–í–æ–∑—Ä–∞—Å—Ç"], "answer": "–í–æ–∑—Ä–∞—Å—Ç"}
]

# –°–ª–æ–≤–∞—Ä—å —è–∑—ã–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ —Å —Ñ–ª–∞–≥–∞–º–∏
LANGUAGES = {
    "ru": {"name": "–†—É—Å—Å–∫–∏–π", "flag": "üá∑üá∫"},
    "en": {"name": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "flag": "üá¨üáß"},
    "zh-CN": {"name": "–ö–∏—Ç–∞–π—Å–∫–∏–π", "flag": "üá®üá≥"},
    "ar": {"name": "–ê—Ä–∞–±—Å–∫–∏–π", "flag": "üá∏üá¶"},
    "es": {"name": "–ò—Å–ø–∞–Ω—Å–∫–∏–π", "flag": "üá™üá∏"},
    "pt": {"name": "–ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π", "flag": "üáµüáπ"},
    "fr": {"name": "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", "flag": "üá´üá∑"},
    "de": {"name": "–ù–µ–º–µ—Ü–∫–∏–π", "flag": "üá©üá™"},
    "it": {"name": "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π", "flag": "üáÆüáπ"},
    "tr": {"name": "–¢—É—Ä–µ—Ü–∫–∏–π", "flag": "üáπüá∑"}
}

# ------------------ –§—É–Ω–∫—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ ------------------

# /start –∏ /help ‚Äì –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = (
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°—É–ø–µ—Ä-–ë–æ—Ç–∞!</b>\n\n"
        "–Ø —É–º–µ—é –≤—ã–ø–æ–ª–Ω—è—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:\n\n"
        "‚Ä¢ <b>/reminder &lt;—Å–µ–∫—É–Ω–¥—ã&gt; &lt;—Ç–µ–∫—Å—Ç&gt;</b> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
        "‚Ä¢ <b>/weather &lt;–≥–æ—Ä–æ–¥&gt;</b> ‚Äî —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞\n"
        "‚Ä¢ <b>/forecast [&lt;–≥–æ—Ä–æ–¥&gt;]</b> ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n"
        "‚Ä¢ <b>/rates</b> ‚Äî –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (–±–∞–∑–æ–≤–∞—è: RUB)\n"
        "‚Ä¢ <b>/search &lt;–∑–∞–ø—Ä–æ—Å&gt;</b> ‚Äî –ø–æ–∏—Å–∫ –≤ Wikipedia\n"
        "‚Ä¢ <b>/convert &lt;–∑–Ω–∞—á–µ–Ω–∏–µ&gt; &lt;–∏–∑_–µ–¥–∏–Ω–∏—Ü—ã&gt; to &lt;–≤_–µ–¥–∏–Ω–∏—Ü–µ&gt;</b> ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä\n"
        "‚Ä¢ <b>/translate_interactive</b> ‚Äî –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫\n"
        "‚Ä¢ <b>/todo</b> ‚Äî –∑–∞–¥–∞—á–∏ (add, list, remove)\n"
        "‚Ä¢ <b>/quiz</b> ‚Äî –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n"
        "‚Ä¢ <b>/settings</b> ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
        "‚Ä¢ <b>/subscribe</b> –∏ <b>/unsubscribe</b> ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "‚Ä¢ <b>/top_quiz</b> ‚Äî —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø–æ –∫–≤–∏–∑—É\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏:"
    )
    keyboard = [
        [InlineKeyboardButton("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="menu_reminder")],
        [InlineKeyboardButton("–ü–æ–≥–æ–¥–∞", callback_data="menu_weather"),
         InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑", callback_data="menu_forecast")],
        [InlineKeyboardButton("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data="menu_rates"),
         InlineKeyboardButton("–ü–æ–∏—Å–∫", callback_data="menu_search")],
        [InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", callback_data="menu_convert"),
         InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥", callback_data="menu_translate")],
        [InlineKeyboardButton("To-Do", callback_data="menu_todo"),
         InlineKeyboardButton("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="menu_quiz")],
        [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings"),
         InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∏", callback_data="menu_subscribe")],
        [InlineKeyboardButton("–¢–æ–ø –∫–≤–∏–∑", callback_data="menu_top_quiz")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(message, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def reminder(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reminder <—Å–µ–∫—É–Ω–¥—ã> <—Ç–µ–∫—Å—Ç>")
        return
    try:
        seconds = int(context.args[0])
        if seconds <= 0:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥ –±–æ–ª—å—à–µ 0.")
            return
        text = " ".join(context.args[1:])
        context.job_queue.run_once(send_reminder, seconds, data={'chat_id': update.effective_chat.id, 'text': text})
        await update.message.reply_text(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {seconds} —Å–µ–∫—É–Ω–¥.")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥.")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ /reminder: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")

async def send_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    job_data = context.job.data
    await context.bot.send_message(chat_id=job_data['chat_id'], text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {job_data['text']}")

# –ü–æ–≥–æ–¥–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    city = " ".join(context.args) if context.args else user_settings.get(update.effective_chat.id, {}).get("city")
    if not city:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather <–≥–æ—Ä–æ–¥> –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ /settings city <–≥–æ—Ä–æ–¥>")
        return
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        data = requests.get(url).json()
        if data.get("cod") != 200:
            await update.message.reply_text(f"–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {city}")
            return
        desc = data["weather"][0]["description"].capitalize()
        temp = data["main"]["temp"]
        humidity = data["main"]["humidity"]
        message = f"–ü–æ–≥–æ–¥–∞ –≤ <b>{city}</b>:\n–£—Å–ª–æ–≤–∏—è: {desc}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%"
        await update.message.reply_text(message, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ /weather: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.")

async def forecast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    city = " ".join(context.args) if context.args else user_settings.get(update.effective_chat.id, {}).get("city")
    if not city:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /forecast <–≥–æ—Ä–æ–¥> –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ /settings city <–≥–æ—Ä–æ–¥>")
        return
    try:
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        data = requests.get(url).json()
        if data.get("cod") != "200":
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è: {city}")
            return
        message = f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city} –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞:</b>\n"
        for entry in data["list"][:8]:
            dt = entry["dt_txt"]
            temp = entry["main"]["temp"]
            desc = entry["weather"][0]["description"].capitalize()
            message += f"{dt}: {temp}¬∞C, {desc}\n"
        await update.message.reply_text(message, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ /forecast: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.")

# –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
async def rates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        fiat_url = "https://api.exchangerate-api.com/v4/latest/RUB"
        fiat_data = requests.get(fiat_url).json()
        fiat_currencies = ["USD", "EUR", "GBP", "JPY", "CNY"]
        fiat_message = "<b>–§–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã (–±–∞–∑–æ–≤–∞—è: RUB):</b>\n"
        for cur in fiat_currencies:
            rate = fiat_data["rates"].get(cur)
            if rate:
                fiat_message += f"{cur}: {rate:.2f}\n"
        crypto_ids = "bitcoin,ethereum,binancecoin,ripple,cardano"
        crypto_url = f"https://api.coingecko.com/api/v3/simple/price?ids={crypto_ids}&vs_currencies=rub"
        crypto_data = requests.get(crypto_url).json()
        crypto_message = "\n<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (—Ü–µ–Ω–∞ –≤ RUB):</b>\n"
        mapping = {"bitcoin": "Bitcoin (BTC)", "ethereum": "Ethereum (ETH)",
                   "binancecoin": "Binance Coin (BNB)", "ripple": "Ripple (XRP)",
                   "cardano": "Cardano (ADA)"}
        for coin, name in mapping.items():
            price = crypto_data.get(coin, {}).get("rub")
            if price:
                crypto_message += f"{name}: {price:,} RUB\n"
        await update.message.reply_text(f"{fiat_message}{crypto_message}", parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ /rates: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç/–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")

# –ü–æ–∏—Å–∫ –≤ Wikipedia
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>")
        return
    try:
        query = " ".join(context.args)
        url = f"https://ru.wikipedia.org/w/api.php?action=opensearch&search={query}&limit=3&namespace=0&format=json"
        data = requests.get(url).json()
        if len(data) >= 4 and data[3]:
            results = "\n".join(data[3])
            message = f"<b>–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª:</b>\n{results}"
        else:
            message = f"–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        await update.message.reply_text(message, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ /search: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

# –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –µ–¥–∏–Ω–∏—Ü
async def convert(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) < 4 or "to" not in context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /convert <–∑–Ω–∞—á–µ–Ω–∏–µ> <–∏–∑_–µ–¥–∏–Ω–∏—Ü—ã> to <–≤_–µ–¥–∏–Ω–∏—Ü–µ>\n–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ /convert 100 kg to lb\n‚Ä¢ /convert 10 km to mi\n‚Ä¢ /convert 20 C to F\n‚Ä¢ /convert 68 F to C"
        )
        return
    try:
        to_index = context.args.index("to")
        value = float(context.args[0])
        from_unit = context.args[1].lower()
        to_unit = context.args[to_index + 1].lower()
        if from_unit in ["kg", "–∫–≥"] and to_unit in ["lb", "—Ñ—É–Ω—Ç", "—Ñ—É–Ω—Ç—ã"]:
            converted = value * 2.20462
            message = f"{value} –∫–≥ = {converted:.2f} —Ñ—É–Ω—Ç–æ–≤"
        elif from_unit in ["km", "–∫–∏–ª–æ–º–µ—Ç—Ä", "–∫–∏–ª–æ–º–µ—Ç—Ä—ã"] and to_unit in ["mi", "miles", "–º–∏–ª", "–º–∏–ª–∏"]:
            converted = value * 0.621371
            message = f"{value} –∫–º = {converted:.2f} –º–∏–ª—å"
        elif from_unit in ["c", "¬∞c", "celsius"] and to_unit in ["f", "¬∞f", "fahrenheit"]:
            converted = value * 9/5 + 32
            message = f"{value}¬∞C = {converted:.2f}¬∞F"
        elif from_unit in ["f", "¬∞f", "fahrenheit"] and to_unit in ["c", "¬∞c", "celsius"]:
            converted = (value - 32) * 5/9
            message = f"{value}¬∞F = {converted:.2f}¬∞C"
        else:
            message = "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."
        await update.message.reply_text(message)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ /convert: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
async def translate_interactive(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = []
    for code, info in LANGUAGES.items():
        button_text = f"{info['name']} {info['flag']}"
        keyboard.append(InlineKeyboardButton(button_text, callback_data=f"src_{code}"))
    rows = [keyboard[i:i+3] for i in range(0, len(keyboard), 3)]
    reply_markup = InlineKeyboardMarkup(rows)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–∞–∫–æ–≥–æ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç:", reply_markup=reply_markup)

async def translation_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    data = query.data
    if data.startswith("src_"):
        src_code = data.split("_")[1]
        context.user_data["src_lang"] = src_code
        keyboard = []
        for code, info in LANGUAGES.items():
            button_text = f"{info['name']} {info['flag']}"
            keyboard.append(InlineKeyboardButton(button_text, callback_data=f"tgt_{code}"))
        rows = [keyboard[i:i+3] for i in range(0, len(keyboard), 3)]
        reply_markup = InlineKeyboardMarkup(rows)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç:", reply_markup=reply_markup)
    elif data.startswith("tgt_"):
        tgt_code = data.split("_")[1]
        context.user_data["target_lang"] = tgt_code
        context.user_data["awaiting_translation"] = True
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:")

async def translation_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get("awaiting_translation"):
        text = update.message.text
        src_lang = context.user_data.get("src_lang")
        target_lang = context.user_data.get("target_lang")
        url = f"https://api.mymemory.translated.net/get?q={text}&langpair={src_lang}|{target_lang}"
        data = requests.get(url).json()
        translation = data.get("responseData", {}).get("translatedText")
        if translation:
            reply = "–í–æ—Ç –≤–∞—à —Ç–µ–∫—Å—Ç!\n```\n" + translation + "\n```"
            await update.message.reply_text(reply, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥.")
        context.user_data.pop("awaiting_translation", None)
        context.user_data.pop("src_lang", None)
        context.user_data.pop("target_lang", None)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏ (To-Do)
async def todo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    if not context.args:
        keyboard = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="todo_add")],
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å", callback_data="todo_list")],
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="todo_remove")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–¥–∞—á–∞–º–∏:", reply_markup=reply_markup)
        return
    subcommand = context.args[0].lower()
    if subcommand == "add":
        task = " ".join(context.args[1:])
        if not task:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ add.")
            return
        todo_tasks.setdefault(chat_id, []).append(task)
        await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task}")
    elif subcommand == "list":
        tasks = todo_tasks.get(chat_id, [])
        if not tasks:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
            return
        message = "<b>–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:</b>\n"
        for i, task in enumerate(tasks, 1):
            message += f"{i}. {task}\n"
        await update.message.reply_text(message, parse_mode=ParseMode.HTML)
    elif subcommand == "remove":
        try:
            index = int(context.args[1]) - 1
            tasks = todo_tasks.get(chat_id, [])
            if 0 <= index < len(tasks):
                removed = tasks.pop(index)
                await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {removed}")
            else:
                await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        except (IndexError, ValueError):
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /todo remove <–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏>")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ subcommand add, list –∏–ª–∏ remove.")

# –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ (Quiz)
async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    question_index = random.randrange(len(quiz_questions))
    question = quiz_questions[question_index]
    text = f"<b>–í–æ–ø—Ä–æ—Å:</b> {question['question']}"
    buttons = [
        [InlineKeyboardButton(opt, callback_data=f"quiz|{question_index}|{opt}")]
        for opt in question["options"]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=reply_markup)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    if not context.args:
        keyboard = [
            [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_show")],
            [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é", callback_data="settings_city")],
            [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", callback_data="settings_geoloc")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
        return
    subcommand = context.args[0].lower()
    if subcommand == "show":
        settings_data = user_settings.get(chat_id, {})
        city = settings_data.get("city", "–Ω–µ –∑–∞–¥–∞–Ω")
        await update.message.reply_text(f"–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n–ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {city}")
    elif subcommand == "city":
        city = " ".join(context.args[1:])
        if city:
            user_settings.setdefault(chat_id, {})["city"] = city
            await update.message.reply_text(f"–ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}")
        else:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /settings city")
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ show –∏–ª–∏ city.")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
async def request_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]],
                                   one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.location:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        url = f"http://api.openweathermap.org/geo/1.0/reverse?lat={lat}&lon={lon}&limit=1&appid={OPENWEATHER_API_KEY}"
        data = requests.get(url).json()
        if data and isinstance(data, list) and data[0].get("name"):
            city = data[0]["name"]
            user_settings[update.effective_chat.id] = {"city": city}
            await update.message.reply_text(f"–ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.")
    else:
        await update.message.reply_text("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ.")

# –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def daily_weather(context: ContextTypes.DEFAULT_TYPE) -> None:
    job_data = context.job.data
    chat_id = job_data["chat_id"]
    city = user_settings.get(chat_id, {}).get("city")
    if not city:
        await context.bot.send_message(chat_id, text="[–ü–æ–¥–ø–∏—Å–∫–∞] –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        return
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        data = requests.get(url).json()
        if data.get("cod") != 200:
            message = f"[–ü–æ–¥–ø–∏—Å–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è {city}."
        else:
            desc = data["weather"][0]["description"].capitalize()
            temp = data["main"]["temp"]
            message = f"[–ü–æ–¥–ø–∏—Å–∫–∞] –ü–æ–≥–æ–¥–∞ –≤ {city}:\n{desc}, {temp}¬∞C"
        await context.bot.send_message(chat_id, text=message)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ daily_weather: %s", e)

async def daily_news(context: ContextTypes.DEFAULT_TYPE) -> None:
    job_data = context.job.data
    chat_id = job_data["chat_id"]
    try:
        feed_url = "http://feeds.bbci.co.uk/russian/rss.xml"
        feed = feedparser.parse(feed_url)
        if feed.entries:
            message = "<b>[–ü–æ–¥–ø–∏—Å–∫–∞] –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:</b>\n"
            for entry in feed.entries[:5]:
                message += f"<a href='{entry.link}'>{entry.title}</a>\n"
        else:
            message = "[–ü–æ–¥–ø–∏—Å–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏."
        await context.bot.send_message(chat_id, text=message, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ daily_news: %s", e)

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /subscribe <weather|news> <HH:MM>")
        return
    sub_type = context.args[0].lower()
    time_str = context.args[1]
    try:
        hour, minute = map(int, time_str.split(":"))
        scheduled_time = time(hour, minute)
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30)")
        return
    chat_id = update.effective_chat.id
    if sub_type == "weather":
        job = context.job_queue.run_daily(daily_weather, scheduled_time, data={"chat_id": chat_id})
        subscriptions[(chat_id, "weather")] = job
        await update.message.reply_text(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–≥–æ–¥—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {time_str}.")
    elif sub_type == "news":
        job = context.job_queue.run_daily(daily_news, scheduled_time, data={"chat_id": chat_id})
        subscriptions[(chat_id, "news")] = job
        await update.message.reply_text(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {time_str}.")
    else:
        await update.message.reply_text("–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å weather –∏–ª–∏ news.")

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) < 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unsubscribe <weather|news>")
        return
    sub_type = context.args[0].lower()
    chat_id = update.effective_chat.id
    key = (chat_id, sub_type)
    job = subscriptions.pop(key, None)
    if job:
        job.schedule_removal()
        await update.message.reply_text(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {sub_type} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    else:
        await update.message.reply_text(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {sub_type} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="menu_reminder")],
        [InlineKeyboardButton("–ü–æ–≥–æ–¥–∞", callback_data="menu_weather"),
         InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑", callback_data="menu_forecast")],
        [InlineKeyboardButton("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç", callback_data="menu_rates"),
         InlineKeyboardButton("–ü–æ–∏—Å–∫", callback_data="menu_search")],
        [InlineKeyboardButton("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", callback_data="menu_convert"),
         InlineKeyboardButton("–ü–µ—Ä–µ–≤–æ–¥", callback_data="menu_translate")],
        [InlineKeyboardButton("To-Do", callback_data="menu_todo"),
         InlineKeyboardButton("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="menu_quiz")],
        [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="menu_settings"),
         InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∏", callback_data="menu_subscribe")],
        [InlineKeyboardButton("–¢–æ–ø –∫–≤–∏–∑", callback_data="menu_top_quiz")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)

# Callback handler –¥–ª—è –º–µ–Ω—é, –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã, –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("menu_"):
        option = data.split("_")[1]
        if option == "reminder":
            await query.edit_message_text("–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /reminder <—Å–µ–∫—É–Ω–¥—ã> <—Ç–µ–∫—Å—Ç>")
        elif option == "weather":
            chat_id = query.message.chat.id
            city = user_settings.get(chat_id, {}).get("city")
            if not city:
                await query.edit_message_text("–ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings city <–≥–æ—Ä–æ–¥> –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.")
            else:
                try:
                    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
                    data_weather = requests.get(url).json()
                    if data_weather.get("cod") != 200:
                        message = f"–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {city}"
                    else:
                        desc = data_weather["weather"][0]["description"].capitalize()
                        temp = data_weather["main"]["temp"]
                        humidity = data_weather["main"]["humidity"]
                        message = f"–ü–æ–≥–æ–¥–∞ –≤ <b>{city}</b>:\n–£—Å–ª–æ–≤–∏—è: {desc}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%"
                    await query.edit_message_text(message, parse_mode=ParseMode.HTML)
                except Exception as e:
                    logger.error("–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é –ø–æ–≥–æ–¥–∞: %s", e)
                    await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.")
        elif option == "forecast":
            chat_id = query.message.chat.id
            city = user_settings.get(chat_id, {}).get("city")
            if not city:
                await query.edit_message_text("–ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settings city <–≥–æ—Ä–æ–¥>.")
            else:
                try:
                    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
                    data_forecast = requests.get(url).json()
                    if data_forecast.get("cod") != "200":
                        message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è: {city}"
                    else:
                        message = f"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city} –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞:</b>\n"
                        for entry in data_forecast["list"][:8]:
                            dt = entry["dt_txt"]
                            temp = entry["main"]["temp"]
                            desc = entry["weather"][0]["description"].capitalize()
                            message += f"{dt}: {temp}¬∞C, {desc}\n"
                    await query.edit_message_text(message, parse_mode=ParseMode.HTML)
                except Exception as e:
                    logger.error("–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é –ø—Ä–æ–≥–Ω–æ–∑: %s", e)
                    await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞.")
        elif option == "rates":
            try:
                fiat_url = "https://api.exchangerate-api.com/v4/latest/RUB"
                fiat_data = requests.get(fiat_url).json()
                fiat_currencies = ["USD", "EUR", "GBP", "JPY", "CNY"]
                fiat_message = "<b>–§–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã (–±–∞–∑–æ–≤–∞—è: RUB):</b>\n"
                for cur in fiat_currencies:
                    rate = fiat_data["rates"].get(cur)
                    if rate:
                        fiat_message += f"{cur}: {rate:.2f}\n"
                crypto_ids = "bitcoin,ethereum,binancecoin,ripple,cardano"
                crypto_url = f"https://api.coingecko.com/api/v3/simple/price?ids={crypto_ids}&vs_currencies=rub"
                crypto_data = requests.get(crypto_url).json()
                crypto_message = "\n<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (—Ü–µ–Ω–∞ –≤ RUB):</b>\n"
                mapping = {"bitcoin": "Bitcoin (BTC)", "ethereum": "Ethereum (ETH)",
                           "binancecoin": "Binance Coin (BNB)", "ripple": "Ripple (XRP)",
                           "cardano": "Cardano (ADA)"}
                for coin, name in mapping.items():
                    price = crypto_data.get(coin, {}).get("rub")
                    if price:
                        crypto_message += f"{name}: {price:,} RUB\n"
                message = fiat_message + crypto_message
                await query.edit_message_text(message, parse_mode=ParseMode.HTML)
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é rates: %s", e)
                await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç/–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")
        elif option == "search":
            await query.edit_message_text("–î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /search <–∑–∞–ø—Ä–æ—Å>")
        elif option == "convert":
            await query.edit_message_text("–î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /convert <–∑–Ω–∞—á–µ–Ω–∏–µ> <–∏–∑_–µ–¥–∏–Ω–∏—Ü—ã> to <–≤_–µ–¥–∏–Ω–∏—Ü–µ>")
        elif option == "translate":
            keyboard = []
            for code, info in LANGUAGES.items():
                button_text = f"{info['name']} {info['flag']}"
                keyboard.append(InlineKeyboardButton(button_text, callback_data=f"src_{code}"))
            rows = [keyboard[i:i+3] for i in range(0, len(keyboard), 3)]
            reply_markup = InlineKeyboardMarkup(rows)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–∞–∫–æ–≥–æ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç:", reply_markup=reply_markup)
        elif option == "todo":
            tasks = todo_tasks.get(query.message.chat.id, [])
            if tasks:
                message = "<b>–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:</b>\n" + "\n".join(f"{i+1}. {task}" for i, task in enumerate(tasks))
            else:
                message = "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–∞—á—É –∫–æ–º–∞–Ω–¥–æ–π /todo add <—Ç–µ–∫—Å—Ç>"
            await query.edit_message_text(message, parse_mode=ParseMode.HTML)
        elif option == "quiz":
            await quiz(update, context)
        elif option == "settings":
            chat_id = query.message.chat.id
            settings_data = user_settings.get(chat_id, {})
            city = settings_data.get("city", "–Ω–µ –∑–∞–¥–∞–Ω")
            keyboard = [
                [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_show")],
                [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é", callback_data="settings_city")],
                [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", callback_data="settings_geoloc")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            message = f"–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n–ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {city}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            await query.edit_message_text(message, reply_markup=reply_markup)
        elif option == "subscribe":
            keyboard = [
                [InlineKeyboardButton("–ü–æ–≥–æ–¥–∞", callback_data="subscribe_weather"),
                 InlineKeyboardButton("–ù–æ–≤–æ—Å—Ç–∏", callback_data="subscribe_news")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=reply_markup)
        elif option == "top_quiz":
            await query.edit_message_text("–§—É–Ω–∫—Ü–∏—è /top_quiz –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        else:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è.")
    elif data.startswith("quiz|"):
        parts = data.split("|")
        if len(parts) < 3:
            return
        q_index = int(parts[1])
        selected = parts[2]
        correct = quiz_questions[q_index]["answer"]
        response = "‚úÖ –í–µ—Ä–Ω–æ!" if selected == correct else f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}"
        await query.edit_message_text(text=response)
    elif data.startswith("settings_"):
        sub = data.split("_")[1]
        if sub == "show":
            chat_id = query.message.chat.id
            settings_data = user_settings.get(chat_id, {})
            city = settings_data.get("city", "–Ω–µ –∑–∞–¥–∞–Ω")
            await query.edit_message_text(f"–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n–ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {city}")
        elif sub == "city":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑: /settings city <–≥–æ—Ä–æ–¥>")
        elif sub == "geoloc":
            keyboard = ReplyKeyboardMarkup([[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]],
                                           one_time_keyboard=True, resize_keyboard=True)
            await query.edit_message_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:")
            await query.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)
    elif data.startswith("subscribe_"):
        sub = data.split("_")[1]
        if sub == "weather":
            await query.edit_message_text("–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–æ–≥–æ–¥—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /subscribe weather <HH:MM>")
        elif sub == "news":
            await query.edit_message_text("–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /subscribe news <HH:MM>")
    elif data.startswith("src_") or data.startswith("tgt_"):
        await translation_callback_handler(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
async def translation_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get("awaiting_translation"):
        text = update.message.text
        src_lang = context.user_data.get("src_lang")
        target_lang = context.user_data.get("target_lang")
        url = f"https://api.mymemory.translated.net/get?q={text}&langpair={src_lang}|{target_lang}"
        data = requests.get(url).json()
        translation = data.get("responseData", {}).get("translatedText")
        if translation:
            reply = "–í–æ—Ç –≤–∞—à —Ç–µ–∫—Å—Ç!\n```\n" + translation + "\n```"
            await update.message.reply_text(reply, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥.")
        context.user_data.pop("awaiting_translation", None)
        context.user_data.pop("src_lang", None)
        context.user_data.pop("target_lang", None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
async def location_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.message.location:
        lat = update.message.location.latitude
        lon = update.message.location.longitude
        url = f"http://api.openweathermap.org/geo/1.0/reverse?lat={lat}&lon={lon}&limit=1&appid={OPENWEATHER_API_KEY}"
        data = requests.get(url).json()
        if data and isinstance(data, list) and data[0].get("name"):
            city = data[0]["name"]
            user_settings[update.effective_chat.id] = {"city": city}
            await update.message.reply_text(f"–ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.")
    else:
        await update.message.reply_text("–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ.")

# ------------------ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ------------------
async def main() -> None:
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", start))
    app.add_handler(CommandHandler("reminder", reminder))
    app.add_handler(CommandHandler("weather", weather))
    app.add_handler(CommandHandler("forecast", forecast))
    app.add_handler(CommandHandler("rates", rates))
    app.add_handler(CommandHandler("search", search))
    app.add_handler(CommandHandler("convert", convert))
    app.add_handler(CommandHandler("translate_interactive", translate_interactive))
    app.add_handler(CommandHandler("todo", todo))
    app.add_handler(CommandHandler("quiz", quiz))
    app.add_handler(CommandHandler("settings", settings))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(CommandHandler("unsubscribe", unsubscribe))
    app.add_handler(CommandHandler("menu", menu))
    app.add_handler(CommandHandler("top_quiz", lambda update, context: update.message.reply_text("–§—É–Ω–∫—Ü–∏—è /top_quiz –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(callback_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, translation_text_handler))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    app.add_handler(MessageHandler(filters.LOCATION, location_handler))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling(close_loop=False)

if __name__ == '__main__':
    asyncio.run(main())
